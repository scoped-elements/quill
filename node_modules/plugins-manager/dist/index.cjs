var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// index.js
__export(exports, {
  addPlugin: () => addPlugin,
  adjustPluginOptions: () => adjustPluginOptions,
  executeSetupFunctions: () => executeSetupFunctions,
  metaConfigToRollupConfig: () => metaConfigToRollupConfig,
  metaConfigToWebDevServerConfig: () => metaConfigToWebDevServerConfig
});

// src/addPlugin.js
function addPlugin(metaPluginAndOptions) {
  const {
    name,
    plugin,
    options = void 0,
    how = "after",
    location = "bottom"
  } = metaPluginAndOptions;
  const addPluginFn = (plugins) => {
    if (plugins === void 0) {
      plugins = [];
    }
    if (plugins.findIndex((pluginObj) => pluginObj.name === name) === -1) {
      let index = -1;
      let _how = how;
      switch (location) {
        case "top":
          index = 0;
          _how = "fixed";
          break;
        case "bottom":
          index = plugins.length;
          _how = "fixed";
          break;
        default:
          index = plugins.findIndex((plugin2) => plugin2.name === location);
      }
      if (index < 0) {
        throw new Error(`Could not find a plugin with the name "${location}" to insert "${name}" ${how} it.`);
      }
      if (_how === "after") {
        index += 1;
      }
      plugins.splice(index, 0, {
        name,
        plugin,
        options
      });
    }
    return plugins;
  };
  return addPluginFn;
}

// src/adjustPluginOptions.js
function isObject(obj) {
  return typeof obj === "object" && !!obj && !Array.isArray(obj);
}
function adjustPluginOptions(pluginName, mergeOptions) {
  const adjustPluginOptionsFn = (plugins) => {
    const index = plugins.findIndex((plugin) => plugin.name === pluginName);
    if (index === -1) {
      throw new Error(`Could not find a plugin with the name "${pluginName}" to adjust the options.`);
    }
    if (typeof mergeOptions === "function") {
      plugins[index].options = mergeOptions(plugins[index].options);
    } else if (isObject(plugins[index].options)) {
      plugins[index].options = {...plugins[index].options, ...mergeOptions};
    } else {
      plugins[index].options = mergeOptions;
    }
    return plugins;
  };
  return adjustPluginOptionsFn;
}

// src/metaConfigToRollupConfig.js
function metaConfigToRollupConfig(config, metaPlugins = []) {
  if (config.plugins) {
    delete config.setupPlugins;
    return config;
  }
  const _metaPlugins = executeSetupFunctions(config.setupPlugins, [...metaPlugins]);
  const plugins = _metaPlugins.map((pluginObj) => {
    if (pluginObj.options) {
      return pluginObj.plugin(pluginObj.options);
    } else {
      return pluginObj.plugin();
    }
  });
  config.plugins = plugins;
  delete config.setupPlugins;
  return config;
}

// src/metaConfigToWebDevServerConfig.js
function metaConfigToWebDevServerConfig(config, metaPlugins, {rollupWrapperFunction = null} = {}) {
  if (config.plugins) {
    delete config.setupPlugins;
    delete config.setupRollupPlugins;
    return config;
  }
  const metaPluginsNoWrap = metaPlugins.map((pluginObj) => {
    pluginObj.__noWrap = true;
    return pluginObj;
  });
  const rollupPlugins = executeSetupFunctions(config.setupRollupPlugins, [...metaPluginsNoWrap]);
  const wrappedRollupPlugins = rollupPlugins.map((pluginObj) => {
    if (typeof rollupWrapperFunction === "function" && pluginObj.__noWrap !== true) {
      pluginObj.plugin = rollupWrapperFunction(pluginObj.plugin);
    }
    return pluginObj;
  });
  const _metaPlugins = executeSetupFunctions(config.setupPlugins, [...wrappedRollupPlugins]);
  const plugins = _metaPlugins.map((pluginObj) => {
    if (pluginObj.options) {
      return pluginObj.plugin(pluginObj.options);
    } else {
      return pluginObj.plugin();
    }
  });
  config.plugins = plugins;
  delete config.setupPlugins;
  delete config.setupRollupPlugins;
  return config;
}

// src/executeSetupFunctions.js
function executeSetupFunctions(setupFunctions, metaPlugins = []) {
  let _metaPlugins = [...metaPlugins];
  if (Array.isArray(setupFunctions)) {
    for (const setupFn of setupFunctions) {
      _metaPlugins = setupFn(_metaPlugins);
    }
  }
  return _metaPlugins;
}
