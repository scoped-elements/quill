declare const MdJsPreview_base: typeof LitElement & import("@open-wc/dedupe-mixin").Constructor<import("@open-wc/scoped-elements/types/src/types").ScopedElementsHost>;
/**
 * @typedef {object} StoryOptions
 * @property {HTMLElement | null} StoryOptions.shadowRoot
 */
/** @typedef {(options?: StoryOptions) => ReturnType<LitElement['render']>} LitHtmlStoryFn */
/**
 * Renders a story within a preview frame
 *
 * @element mdjs-preview
 * @prop {StoryFn} [story=(() => TemplateResult)] Function that returns the story
 */
export class MdJsPreview extends MdJsPreview_base {
    static get scopedElements(): {
        'lion-accordion': typeof LionAccordion;
    };
    static get properties(): {
        story: {
            attribute: boolean;
        };
        key: {
            type: StringConstructor;
        };
        deviceMode: {
            type: BooleanConstructor;
            attribute: string;
            reflect: boolean;
        };
        sameSettings: {
            type: BooleanConstructor;
        };
        contentHeight: {
            type: NumberConstructor;
        };
        simulatorUrl: {
            type: StringConstructor;
        };
        platform: {
            type: StringConstructor;
            reflect: boolean;
        };
        platforms: {
            type: ArrayConstructor;
        };
        size: {
            type: StringConstructor;
        };
        sizes: {
            type: ArrayConstructor;
        };
        theme: {
            type: StringConstructor;
            reflect: boolean;
        };
        themes: {
            type: ArrayConstructor;
        };
        language: {
            type: StringConstructor;
        };
        languages: {
            type: ArrayConstructor;
        };
        edgeDistance: {
            type: BooleanConstructor;
        };
        autoHeight: {
            type: BooleanConstructor;
        };
        rememberSettings: {
            type: BooleanConstructor;
        };
        __copyButtonText: {
            type: StringConstructor;
        };
    };
    static get styles(): import("lit").CSSResultGroup;
    /** @type {LitHtmlStoryFn} */
    story: LitHtmlStoryFn;
    key: string;
    contentHeight: number;
    simulatorUrl: string;
    __supportsClipboard: boolean;
    __copyButtonText: string;
    theme: string;
    /** @type {{ key: string, name: string }[]} */
    themes: {
        key: string;
        name: string;
    }[];
    language: string;
    languages: {
        key: string;
        name: string;
    }[];
    platform: string;
    /** @type {{ key: string, name: string }[]} */
    platforms: {
        key: string;
        name: string;
    }[];
    size: string;
    sizes: {
        key: string;
        name: string;
        platform: string;
        width: number;
        height: number;
        dpr: number;
    }[];
    deviceMode: boolean;
    autoHeight: boolean;
    edgeDistance: boolean;
    sameSettings: boolean;
    rememberSettings: boolean;
    __firstRun: boolean;
    __syncUp: boolean;
    lightDomRenderTarget: HTMLDivElement | undefined;
    get baseUrl(): string;
    get deviceHeight(): number;
    /**
     * @param {string} platform
     */
    getSizesFor(platform: string): {
        key: string;
        name: string;
        platform: string;
        width: number;
        height: number;
        dpr: number;
    }[];
    get sizeData(): {
        key: string;
        name: string;
        platform: string;
        width: number;
        height: number;
        dpr: number;
    } | {
        width: number;
        height: number;
        name: string;
    };
    onSubscribe: () => void;
    get iframeUrl(): string;
    /**
     * @param {string} platform
     */
    changePlatform(platform: string): void;
    onCopy(): Promise<void>;
    renderPlatforms(): import("lit").TemplateResult<1> | undefined;
    renderPlatform(): import("lit").TemplateResult<1> | undefined;
    renderSize(): import("lit").TemplateResult<1> | undefined;
    renderSizes(): import("lit").TemplateResult<1> | undefined;
    renderViewport(): import("lit").TemplateResult<1>;
    renderThemes(): import("lit").TemplateResult<1> | undefined;
    renderVisual(): import("lit").TemplateResult<1>;
    renderLanguages(): import("lit").TemplateResult<1> | undefined;
    renderLocalization(): import("lit").TemplateResult<1>;
    renderEdgeDistance(): import("lit").TemplateResult<1>;
    renderAutoHeight(): import("lit").TemplateResult<1>;
    renderSameSettings(): import("lit").TemplateResult<1>;
    renderRememberSettings(): import("lit").TemplateResult<1>;
    renderSyncSettings(): import("lit").TemplateResult<1>;
}
export type StoryOptions = {
    shadowRoot: HTMLElement | null;
};
export type LitHtmlStoryFn = (options?: StoryOptions | undefined) => ReturnType<LitElement['render']>;
import { LitElement } from "lit/node_modules/lit-element/lit-element";
import { LionAccordion } from "@lion/accordion";
export {};
//# sourceMappingURL=MdJsPreview.d.ts.map