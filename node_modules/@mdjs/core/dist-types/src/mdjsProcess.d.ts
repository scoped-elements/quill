export type Story = import('@mdjs/core/types/code').Story;
export type ParseResult = import('@mdjs/core/types/code').ParseResult;
export type ProcessResult = import('@mdjs/core/types/code').ProcessResult;
export type MdjsProcessPlugin = import('@mdjs/core/types/code').MdjsProcessPlugin;
/**
 * Processes mdjs to html/js/stories
 *
 * Js code includes the linking between js and stories
 *
 * @param {string} mdjs
 * @param {object} options
 * @param {string} [options.rootNodeQueryCode]
 * @param {function[]} [options.setupUnifiedPlugins]
 * @param {MdjsProcessPlugin[]} [options.plugins] deprecated option use setupUnifiedPlugins instead
 */
export function mdjsProcess(mdjs: string, { setupUnifiedPlugins }?: {
    rootNodeQueryCode?: string | undefined;
    setupUnifiedPlugins?: Function[] | undefined;
    plugins?: any[] | undefined;
}): Promise<{
    stories: import("@mdjs/core/types/code").Story[];
    jsCode: string;
    html: string;
}>;
//# sourceMappingURL=mdjsProcess.d.ts.map